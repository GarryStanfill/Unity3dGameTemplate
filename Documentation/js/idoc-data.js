const MEMBERS = [
{"signature":"Song","childcount":5,"type":"Class","name":"Song","token":"[CreateAssetMenu(fileName = \"Song\", menuName = \"New/Song\")]\npublic class Song : ScriptableObject ","scope":"","comments":{"summary":"Song scriptable object"}},{"signature":"Song.songName","childcount":0,"type":"Field","name":"songName","token":"public string songName ","scope":"Song","comments":{"summary":"The name of the audio clip"}},{"signature":"Song.song","childcount":0,"type":"Field","name":"song","token":"public AudioClip song ","scope":"Song","comments":{"summary":"Audioclip reference"}},{"signature":"Song.playTime","childcount":0,"type":"Field","name":"playTime","token":"public double playTime ","scope":"Song","comments":{"summary":"Length of the song.\r\n     <remarks>Extrapolated when OnEnable executes</remarks>"}},{"signature":"Song.enabled","childcount":0,"type":"Field","name":"enabled","token":"public bool enabled ","scope":"Song","comments":{"summary":"Is this song clip enabled?"}},{"signature":"MusicController","childcount":10,"type":"Class","name":"MusicController","token":"[RequireComponent(typeof(AudioSource))]\npublic class MusicController : MonoBehaviour ","scope":"","comments":{"summary":"Controls music playback"}},{"signature":"MusicController.currentSong","childcount":0,"type":"Field","name":"currentSong","token":"public Song currentSong ","scope":"MusicController","comments":{"summary":"Song scriptable object of the currently playing audio clip"}},{"signature":"MusicController.delayBetweenSongs","childcount":0,"type":"Field","name":"delayBetweenSongs","token":"public float delayBetweenSongs ","scope":"MusicController","comments":{"summary":"Amount of time to wait between end of currentSong and start of next song"}},{"signature":"MusicController.allSongs","childcount":0,"type":"Field","name":"allSongs","token":"List<Song> allSongs ","scope":"MusicController","comments":{"summary":"All songs in the Resources/Music folder at runtime"}},{"signature":"MusicController.activeSongs","childcount":0,"type":"Field","name":"activeSongs","token":"List<Song> activeSongs ","scope":"MusicController","comments":{"summary":"All songs marked as enabled in the Resources/Music folder at runtime"}},{"signature":"MusicController.audioMixerGroup","childcount":0,"type":"Field","name":"audioMixerGroup","token":"public AudioMixerGroup audioMixerGroup ","scope":"MusicController","comments":{"summary":"The AudioMixerGroup that this controller uses to route clip output."}},{"signature":"MusicController.Awake()","childcount":0,"type":"Method","name":"Awake","token":"private void Awake()","scope":"MusicController"},{"signature":"MusicController.LoadAudioClips()","childcount":0,"type":"Method","name":"LoadAudioClips","token":"void LoadAudioClips()","scope":"MusicController","comments":{"summary":"Loads the Song scriptable objects present in the Resources/Music folder at runtime"}},{"signature":"MusicController.PlayRandomMusicAudioClip()","childcount":0,"type":"Method","name":"PlayRandomMusicAudioClip","token":"private void PlayRandomMusicAudioClip()","scope":"MusicController","comments":{"summary":"Select a song from the activeSongs list and play it, recursively invokes to start a new song when clip finishes + delayBetweenSongs value"}},{"signature":"SetVolume","childcount":6,"type":"Class","name":"SetVolume","token":"[RequireComponent(typeof(Slider))]\npublic class SetVolume : MonoBehaviour ","scope":"","comments":{"summary":"Sets the volume of AudioMixerGroup from slider range 0.0001 - 1.  Put class on slider."}},{"signature":"SetVolume.audioMixerGroup","childcount":0,"type":"Field","name":"audioMixerGroup","token":"AudioMixerGroup audioMixerGroup ","scope":"SetVolume"},{"signature":"SetVolume.audioControllerName","childcount":0,"type":"Field","name":"audioControllerName","token":"[Tooltip(\"This is the name of the controller that will be used to get the proper audio mixer group.  The controller should be a child of the 'Controllers' game object in the scene\")]\npublic string audioControllerName ","scope":"SetVolume"},{"signature":"SetVolume.SetLevel(float)","childcount":0,"type":"Method","name":"SetLevel","token":"public void SetLevel(float sliderValue)","scope":"SetVolume","comments":{"summary":"Sets the volume level in decibels (-80 - 0) on the slider","param-sliderValue":"value from slider"},"params":{"sliderValue":"float"}},{"signature":"SetVolume.SaveLevel(float)","childcount":0,"type":"Method","name":"SaveLevel","token":"private void SaveLevel(float sliderValue)","scope":"SetVolume","comments":{"summary":"Save the level to PlayerPrefs","param-sliderValue":"value of the slider"},"params":{"sliderValue":"float"}}
];
const ROOT_MEMBERS = [
{"signature":"Song","childcount":5,"type":"Class","name":"Song","token":"[CreateAssetMenu(fileName = \"Song\", menuName = \"New/Song\")]\npublic class Song : ScriptableObject ","scope":"","comments":{"summary":"Song scriptable object"}},{"signature":"MusicController","childcount":10,"type":"Class","name":"MusicController","token":"[RequireComponent(typeof(AudioSource))]\npublic class MusicController : MonoBehaviour ","scope":"","comments":{"summary":"Controls music playback"}},{"signature":"SetVolume","childcount":6,"type":"Class","name":"SetVolume","token":"[RequireComponent(typeof(Slider))]\npublic class SetVolume : MonoBehaviour ","scope":"","comments":{"summary":"Sets the volume of AudioMixerGroup from slider range 0.0001 - 1.  Put class on slider."}}
];
const BUILTIN_WORDS_REGEX = /\b(?:__arglist|abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|Dictionary|do|double|dynamic|else|enum|event|Exception|extern|false|final|finally|fixed|float|for|foreach|from|from|get|get;|goto|grouby|HashSet|if|in|in|int|interface|internal|is|List|lock|long|nameof|namespace|new|null|object|out|params|partial|private|protected|public|readonly|ref|return|sealed|select|select|set|set;|short|Single|Single32|Single64|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|UInt16|UInt32|UInt64|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|where|where|while)\b/g;
